<template>
    <div class="mt-8">
      <!-- 轉錄結果 -->
      <div v-if="format === 'text'" class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">轉錄結果</label>
        <textarea
          v-model="localText"
          class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
          rows="6"
          placeholder="轉錄結果將顯示在此..."
        ></textarea>
      </div>
  
      <!-- SRT 結果 -->
      <div v-if="format === 'srt'" class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">SRT 結果</label>
        <div v-for="(line, index) in srtLines" :key="index" class="flex items-center mb-2">
          <span class="text-sm text-gray-500 w-32">{{ line.timecode }}</span>
          <input
            type="text"
            v-model="line.text"
            class="flex-1 border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>
  
      <!-- 按鈕群 -->
      <div class="flex flex-wrap gap-4 mb-6">
        <button
          @click="translateText"
          class="bg-blue-600 text-white px-4 py-2 rounded-md shadow hover:bg-blue-700 transition"
        >
          翻譯成英文
        </button>
        <button
          @click="editText"
          class="bg-yellow-500 text-white px-4 py-2 rounded-md shadow hover:bg-yellow-600 transition"
        >
          逐字稿潤稿
        </button>
        <button
          @click="summarizeText"
          class="bg-purple-600 text-white px-4 py-2 rounded-md shadow hover:bg-purple-700 transition"
        >
          逐字稿摘要
        </button>
      </div>
  
      <!-- 潤稿依據 -->
      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">潤稿依據</label>
        <input
          type="text"
          v-model="editingBasis"
          class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="請輸入潤稿依據..."
        />
      </div>
  
      <!-- 結果顯示區 -->
      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">結果</label>
        <textarea
          v-model="actionContent"
          class="w-full border border-gray-300 rounded-md p-3 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
          rows="6"
          placeholder="操作結果將顯示在此..."
          readonly
        ></textarea>
      </div>
    </div>
  </template>
  
  <script>
  import { ref, watch } from 'vue';
  
  export default {
    name: 'ResultDisplay',
    props: {
      text: {
        type: String,
        required: true,
      },
      format: {
        type: String,
        default: 'text',
      },
      actionResult: {
        type: String,
        default: '',
      },
    },
    emits: ['action'],
    setup(props, { emit }) {
      // 解析 SRT 格式
      const parseSRT = (srtText) => {
        const srtArray = srtText.split('\n\n');
        return srtArray.map((block) => {
          const lines = block.split('\n');
          if (lines.length >= 3) {
            return {
              timecode: lines[1],
              text: lines.slice(2).join(' '),
            };
          } else if (lines.length === 2) {
            return {
              timecode: lines[1],
              text: '',
            };
          } else {
            return {
              timecode: '',
              text: lines[0],
            };
          }
        });
      };
  
      // 生成 SRT 格式
      const generateSRT = () => {
        return srtLines.value
          .map((line, index) => {
            return `${index + 1}\n${line.timecode}\n${line.text}`;
          })
          .join('\n\n');
      };
  
      const localText = ref(props.text);
      const actionContent = ref(props.actionResult);
      const editingBasis = ref('');
      const srtLines = ref([]);
  
      // 當 props.text 或 format 更新時，根據 format 初始化內容
      watch(
        () => [props.text, props.format],
        ([newText, newFormat]) => {
          if (newFormat === 'srt') {
            // 假設 newText 是 SRT 格式的文字
            srtLines.value = parseSRT(newText);
          } else {
            localText.value = newText;
          }
        },
        { immediate: true }
      );
  
      // 翻譯成英文
      const translateText = () => {
        const content = props.format === 'srt' ? generateSRT() : localText.value;
        emit('action', 'translate', content);
      };
  
      // 逐字稿潤稿，包含潤稿依據
      const editText = () => {
        const content = props.format === 'srt' ? generateSRT() : localText.value;
        emit('action', 'edit', { text: content, basis: editingBasis.value });
      };
  
      // 逐字稿摘要
      const summarizeText = () => {
        const content = props.format === 'srt' ? generateSRT() : localText.value;
        emit('action', 'summarize', content);
      };
  
      // 當 actionResult 更新時，更新相應的內容
      watch(
        () => props.actionResult,
        (newVal) => {
          actionContent.value = newVal;
        }
      );
  
      return {
        localText,
        srtLines,
        actionContent,
        editingBasis,
        translateText,
        editText,
        summarizeText,
      };
    },
  };
  </script>
  
  <style scoped>
  textarea {
    transition: border-color 0.2s, box-shadow 0.2s;
  }
  </style>
  